// wraper 
public class Wrap {
  public static void main(String[] args) {
	  //Variable.DatatypeValue is to use Wrapper objects
	Integer myInt = 5;
    Double myDouble = 5.99;
    Character myChar = 'A';
    System.out.println(myInt.intValue());
    System.out.println(myDouble.doubleValue());
    System.out.println(myChar.charValue());
	// toString is used to convert to string
    Integer myInt2 = 100;
    String myString = myInt2.toString();
    System.out.println(myString.length());
	Double myDouble2 = 100.24681;
    String myString2 = myDouble2.toString();
    System.out.println(myString2.length());
  }
}


// static block
public class SB{
	//default constructor
public SB(){
System.out.println("Inside Default Constructor");
}
//static block
static{
	int a=20;
	System.out.println(a);
	System.out.println("Inside the static block: -1");
}
static{
	int b=200;
	System.out.println(b);
	System.out.println("Inside the static block: -2");
}
//user defined method 
public void demo(){
System.out.println("Inside demo method");}
public static void main(String args[]){
	SB s1=new SB();// creating an object  and call a default constructor
	s1.demo();//invoking the method through object
	
}}

// static block
public class StaticBlock {
 static int staticVariable;
  
    static {
        // Initialize static variable
        staticVariable = 100;
        System.out.println("Static block executed.");
        System.out.println("Static variable initialized to: " + staticVariable);
    } 
	public StaticBlock() {
        System.out.println("Constructor executed.");
    }
 public static void main(String[] args) {
        System.out.println("Main method started.");

    
        StaticBlock obj1 = new StaticBlock();
       StaticBlock obj2 = new StaticBlock();
System.out.println("Static variable after creating objects: " + StaticBlock.staticVariable);
		//classname.static variable name
    }
}




// method 

public class Method1
{  
public static void main(String [] args)  
{  
Method1 obj = new Method1();    
System.out.println("The sum is: "+obj.add(12, 13)); 
 System.out.println("The division is: "+obj.div(120, 13)); 

 System.out.println("The remainder is: "+obj.rem(1200, 12));
 }  
int s; //local variable
float d;
float r; 
//saMPLE:
public int add(int a, int b)  
{  
s = a+b;  
return s;  }
public float div(int a, int b)  
{  
d = a/b; 
//r=a%b; 
return d;
 }
 public float rem(int a, int b)  
{  

r=a%b; 
return r;
}
}
//create an instance method to return the value of quotient 
//and remainder .
//add a condition if denominator is 0 -> division is not possible.



//method overloading 
// syntax : use the same name of method multiple times inside a class.
public class Method3{
	public static int area(int side){
		return side*side;}
		public static int area(int side1, int side2){
		return side1*side2;}
	public static void main(String args[]){
		System.out.println("Area 1 is:" +area(4));
		System.out.println("Area 1 is:" +area(5,7));
		
		
}}
		
		



// copy constructor
// optional_modifier constructor_name(constructor_name var_name){
//}
class copy1{
	
		int i;
		String n;
		public copy1(int i, String n){
			this.i=i;// instance variable= local variable
		this.n=n;}
		public copy1(copy1 c)
		{
			i=c.i;
			n=c.n;
		}
		void display1(){ System.out.println(i+" "+n);}
		public static void main(String args[]){
			copy1 cp=new copy1(12,"Kabir");
			copy1 ct= new copy1(cp);
			cp.display1();
ct.display1();}}
			
		
		
		

// type casting 

import java.lang.*;

public class TypeCastingDemo
{
	public static void main(String args[])
	{
		char c1='a', c2='s';
		float f1=0.0F, f2=65.0F;
		double d1=0.0, d2=75.8;
		byte b1=126, b2=125;
		short s1=254, s2=253;
		int i1=2147483646, i2=68;
		long l1=9999999999999L, l2=9999999999998L;
		
		System.out.println("Char -> Float -- Implicit/Auto/Small-To-Large Casting");
		System.out.println("Before	C1: "+c1);
		f1=c1;	//implicit type casting 
		System.out.println("After	F1: "+f1);
		System.out.println();
		
		System.out.println("Float -> Char -- Explicit/Non-Auto/Large-To-Small Casting");
		System.out.println("Before	F2: "+f2);
		c2=(char)f2;	//explicit type casting 
		System.out.println("After	C2: "+c2);
		System.out.println();
		
		System.out.println("Char -> Integer -- Implicit/Auto/Small-To-Large Casting");
		System.out.println("Before	C1: "+c1);
		i1=c1;	//implicit type casting 
		System.out.println("After	I1: "+i1);
		System.out.println();
		
		System.out.println("Integer -> Char -- Explicit/Non-Auto/Large-To-Small Casting");
		System.out.println("Before	I2: "+i2);
		c2=(char)i2;	//explicit type casting 
		System.out.println("After	C2: "+c2);
		System.out.println();
		
		System.out.println("Float -> Double -- Implicit/Auto/Small-To-Large Casting");
		System.out.println("Before	F1: "+f1);
		d1=f1;	//implicit type casting 
		System.out.println("After	D1: "+d1);
		System.out.println();
		
		System.out.println("Double -> Float -- Explicit/Non-Auto/Large-To-Small Casting");
		System.out.println("Before	D2: "+d2);
		f2=(float)d2;	//explicit type casting 
		System.out.println("After	F2: "+f2);
		System.out.println();
		
		System.out.println("Int -> Long -- Implicit/Auto/Small-To-Large Casting");
		System.out.println("Before	I1: "+i1);
		l1= i1;	//implicit type casting 
		System.out.println("After	L1: "+l1);
		System.out.println();
		
		System.out.println("Long -> Int -- Explicit/Non-Auto/Large-To-Small Casting");
		System.out.println("Before	L2: "+l2);
		i2= (int) l2;	//explicit type casting 
		System.out.println("After	I2: "+i2);
		System.out.println();
		
		System.out.println("Int -> Double -- Implicit/Auto/Small-To-Large Casting");
		System.out.println("Before	I1: "+i1);
		d1=i1;	//implicit type casting 
		System.out.println("After	D1: "+d1);
		System.out.println();
		
		System.out.println("Double -> Int -- Explicit/Non-Auto/Large-To-Small Casting");
		System.out.println("Before	D2: "+d2);
		i2= (int)d2;	//explicit type casting 
		System.out.println("After	I2: "+i2);
		System.out.println();
		
		System.out.println("Char -> Short -- Explicit/Auto/Small-To-Large Casting");
		System.out.println("Before	C1: "+c1);
		s1= (short)c1;	//explicit type casting 
		System.out.println("After	S1: "+s1);
		System.out.println();
		
		System.out.println("Short -> Char -- Explicit/Non-Auto/Large-To-Small Casting");
		System.out.println("Before	S2: "+s2);
		c2= (char)s2;	//explicit type casting 
		System.out.println("After	C2: "+c2);
		System.out.println();
	}
}



// static method
//static methods: they can be called or invoked directly from classname

class TestStatic4{
	public int add(int a, int b){
	return a+b;}
	public static int multiply(int a, int b){
	return a*b;}
	public static void main(String args[]){
		
		int result;
		
	TestStatic4 t1=new TestStatic4();
	result= t1.add(23,4);
	System.out.println(result);
	int result2=TestStatic4.multiply(5,4);
	System.out.println(result2);
	
	

}}


// Array

// making an array
import java.lang.*;
class Average{
	public static void main(String args[]){
		double num[]={10.1, 12.4, 16.8, 10};
		double result=0.0;
		for(int i=0;i<4;i++){
		result=result+num[i];}
System.out.println(result);}}

// 2
class Testarray{  
public static void main(String args[]){  
int a[]=new int[5];//declaration and instantiation  
a[0]=10;//initialization  
a[1]=20;  
a[2]=70;  
a[3]=40;  
a[4]=50;  
//traversing array  
for(int i=0;i<a.length;i++)//length is the property of array  
System.out.println(a[i]); 
// alternative way
// for(int i:arr)  
//System.out.println(i);   
}}  


// array loop
import java.util.Scanner;
class input3{
	public static void main(String args[]){
		Scanner in=new Scanner(System.in);
		double number[]=new double[5];
		//type arr_name[]=new type[size]
		for(int i=0;i<number.length;i++){
			System.out.println("enter your elements");
number[i]=in.nextDouble();}
for(int i=0;i<number.length;i++){
			System.out.println(" "+number[i]+" ");
}


}}


// package and array

package B; 
class Balance{
String name;
double ba;
public Balance(String n, double b){
	this.name=n;
this.ba=b;}
public void display(){
	if(ba<0.0){
System.out.println(name+" "+ba);}}}
public class Account1{
	public static void main(String args[]){
		Balance current[]=new Balance[4];// memory space 
		current[0]=new Balance("Anika",5000.35);
		current[1]=new Balance("Samiha",3000.35);
		current[2]=new Balance("Kishore",2000.35);
		current[3]=new Balance("Rahim",-2400.35);
		for(int i=0;i<4;i++){
		current[i].display();}
		// for(class/type var: array_name)
			//{array_name.method()}
}}
		
		
// String operator

// charAt 
import java.lang.*;
import java.util.Scanner;
class ch{
public static void main(String args[]){
	Scanner input=new Scanner(System.in);
	char c=input.next().charAt(0);
	//charAT(0)
	if(c>='a' && c<='z')
	{System.out.println("User entered a small letter");}
	else if(c>='A' && c<='Z')
	{System.out.println("User entered a capital letter");}
	else
	{System.out.println("Not letter");}
	//input.close();

}}
	
// compareTo 
public class com {
    public static void main(String[] args) {
        String str1 = "apple";
        String str2 = "banana";
        String str3 = "apple";

        System.out.println(str1.compareTo(str2)); 
		// Negative, because "apple" comes before "banana"
        System.out.println(str1.compareTo(str3)); 
		// Zero, because both strings are equal
        System.out.println(str2.compareTo(str1)); 
		// Positive, because "banana" comes after "apple"
    }
}

// 
import java.lang.*;
class comp{
public static void main(String args[]){
	String s1="America";
	String s2="Banana";
	String s3=s1;
	
	System.out.println(s1.compareTo(s2));
	System.out.println(s1.compareTo(s3));
System.out.println(s2.compareTo(s1));}}



// create a string object , store its indexes as integer and perform type 
//casting  to convert it into character within a class
import java.lang.*;
public class Ex{
public static void main(String args[]){
	String s6=new String("Java");
	String s5="Java Lab";
	int index1= s5.charAt(0);
	int index2= s6.charAt(2);// selecting indexes 
System.out.println("The character is :" +(char)index1);// type casting
System.out.println("The character is :" +(char)index2);
// trim(), indexOf() , equals(), compareTo(), toUpperCase(), to LowerCase()

}}



// indexOf
import java.lang.*;
//indexOf()
class index{
public static void main(String args[]){
	String r= new String("Hello, World!");
	//index of a character
	System.out.println(r.indexOf('o'));
	
	//index of character from a specific index
	System.out.println(r.indexOf('l',4));
	//index of substring return
	System.out.println(r.indexOf("ld"));
	String str="Raima Adhikary";
	System.out.println(str.indexOf('h'));
	
	
}}
	

//encapsulation task
//default(Package -private) member class
package encapsulation;
public class person6{
	private String name;
	private int age;
	public void setName(String n){
	this.name=n;}
	public void setAge(int a){
	this.age=a;}
	public String getName(){ return name;}
	public int getAge(){return age;}
	
}

// string operation 
import java.lang.*;// all classes import
class string12{
	public static void main(String args[]){
		String s0=new String();// empty string
		String s11= new String("Java Class");// string objects
		int age=25;
		String msg="she is "+ age+" years old";
		String s12=" PRogramming";// implicit // string literal
System.out.println(s11);
System.out.println(s12);
System.out.println(msg);
// isEmpty() method checks whether you have entered any string or not
System.out.println(s0.isEmpty());
System.out.println(s11.isEmpty());
System.out.println(s12.isEmpty());
// length() methodSystem.out.println(s0.isEmpty());
System.out.println(s11.length());
System.out.println(s12.length());
//charAt()
System.out.println(s11.charAt(3));
System.out.println(msg.charAt(3));


//string operations
import java.lang.*;
class string20{
	public static void main(String args[]){
		String s0=new String();//empty string object
		String s11=new String("Hello World");// string object
		String s14=new String("Hello World");
String s12="Hi";// string literal
String s13=s12;//string reference
//equals()

if(s11.equals(s14)){
System.out.println("yes");}
else{System.out.println("no");}

//compareTo()
String s21="America";// 7 characters
String s22="banana";//6 characters
String s23=s22;
System.out.println(s21.compareTo(s22));
System.out.println(s22.compareTo(s21));
System.out.println(s23.compareTo(s22));
//indexOf
String s31=new String("Hello World ");
System.out.println(s31.indexOf('e'));
// index of a character from a specific position
System.out.println(s31.indexOf('l',5));
//beginning index of a substring 
System.out.println(s31.indexOf("World"));
System.out.println(s31.toLowerCase());
System.out.println(s31.toUpperCase());
//trim()
System.out.println(s31.trim());

//substring()
System.out.println(s31.substring(0,3));
System.out.println(s31.substring(7));


}}
		



}}



import java.lang.*;

public class StringDemo
{
public static void main(String args[])
{
	String s1="HELLO java";
	String s2= new String();
	String s3 = new String("Hello");
	String s4 = "Hello";
	String s5 = new String("Hello");
	String s6 = "Hello";
	String s8=new String("JaVaClaSs");
		
		System.out.println(s1.isEmpty());
		System.out.println(s2.isEmpty());
		System.out.println(s1.length());
		System.out.println(s3.charAt(1));
		
		System.out.println(s1.concat(s3));
	System.out.println(s1);
	System.out.println(s3);
	if(s3 == s5)
	{
	System.out.println("yes");
	}
	else
	{
	System.out.println("No");
	}
	if(s3.equals(s5))
	{
	System.out.println("yes");
	}
	else
	{
	System.out.println("No");
	}
String s7 = s1.substring(2,7);//begin index is inclusive end index is exclusive
	System.out.println(s7);
	System.out.println(s1);
	s1 = s1.substring(3,7);
	System.out.println(s1); 
	s8=s8.toLowerCase();
System.out.println(s8);}}



// trim(), indexOf() , equals(), compareTo(), toUpperCase(), to LowerCase()
import java.lang.*;
class Stringop{
	public static void main(String args[]){
		String s=" Saima Shahin ";
		String s2="Java Programming";
		String s3= new String("Hello");
		String s4= new String("Hello");
		//String s4=s3; // string reference
		System.out.println(s.trim());// trim method
		System.out.println(s.concat(s2));// concat() method
		System.out.println(s2.toUpperCase());
		System.out.println(s2.toLowerCase());
		if(s3==s4)
		{System.out.println("yes");}
	else
	{System.out.println("no");}
if(s3.equals(s4))
		{System.out.println("yes");}
	else	{System.out.println("no");}
}}
	


// sub string

public class sub {
    public static void main(String[] args) {
        String str = "Hello, world!";
        
        // Extract substring from index 7 to the end
        System.out.println(str.substring(7));      
		// Output: "world!"
        
        // Extract substring from index 0 to index 5 (exclusive)
        System.out.println(str.substring(0, 5));    
		// Output: "Hello"
        
        // Extract substring from index 7 to index 12 (exclusive)
        System.out.println(str.substring(7, 12));     
		// Output: "world"
    }
}


// inheritance

// extends keyword
class Animal{
	String name;
	public void eat(){
System.out.println("I can eat");}}
class cat extends Animal{
	public void display(){
System.out.println("My name is "+name);}}
public class t5{
	public static void main(String args[]){
		cat c1=new cat();
		c1.name="Meow";
c1.display();}}
		

// Parent class is Bank11 Class
// child classes - > SIBL - 4%, PBL- 5.3%
// same method
//mother class
class Bank11{
public float getROI(){
return 0;}
}
class SIBL extends Bank11{
public float getROI(){
return 4;}}
class PBL extends Bank11{
public float getROI(){
return 5.3f;}}
public class test1{
	public static void main(String args[]){
		SIBL s= new SIBL();
		PBL p=new PBL();
		System.out.println("Rate of interest: "+s.getROI()+" %");
		System.out.println("Rate of interest: "+p.getROI()+" %");
}}
		
		
		



